/*
 * COM Classes for PortableDeviceApi
 *
 * Copyright 2023 Corentin NoÃ«l
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

cpp_quote("#include <winapifamily.h>")

import "propidl.idl";
import "wtypes.idl";
import "unknwn.idl";
import "portabledevicetypes.idl";

interface IPortableDeviceManager;
interface IPortableDevice;
interface IPortableDeviceContent;
interface IPortableDeviceContent2;
interface IEnumPortableDeviceObjectIDs;
interface IPortableDeviceProperties;
interface IPortableDeviceResources;
interface IPortableDeviceCapabilities;
interface IPortableDeviceEventCallback;
interface IPortableDeviceDataStream;
interface IPortableDevicePropertiesBulk;
interface IPortableDevicePropertiesBulkCallback;
interface IPortableDeviceServiceManager;
interface IPortableDeviceService;
interface IPortableDeviceServiceCapabilities;
interface IPortableDeviceServiceMethods;
interface IPortableDeviceServiceMethodCallback;
interface IPortableDeviceDispatchFactory;
interface IPortableDeviceServiceActivation;
interface IPortableDeviceServiceOpenCallback;

[
    object,
    uuid(a1567595-4c2f-4574-a6fa-ecef917b9a40),
    pointer_default(unique)
]
interface IPortableDeviceManager : IUnknown
{
    HRESULT GetDevices(
        [in, out, unique] WCHAR **pnp_device_ids,
        [in, out] DWORD *len);

    HRESULT RefreshDeviceList();

    HRESULT GetDeviceFriendlyName(
        [in] const WCHAR *pnp_device_id,
        [in, out, unique] WCHAR *device_friendly_name,
        [in, out] DWORD *len);

    HRESULT GetDeviceDescription(
        [in] const WCHAR *pnp_device_id,
        [in, out, unique] WCHAR *device_description,
        [in, out] DWORD *len);

    HRESULT GetDeviceManufacturer(
        [in] const WCHAR *pnp_device_id,
        [in, out, unique] WCHAR *device_manufacturer,
        [in, out] DWORD *len);

    HRESULT GetDeviceProperty(
        [in] const WCHAR *pnp_device_id,
        [in] const WCHAR *device_property_name,
        [in, out, unique] BYTE *data,
        [in, out, unique] DWORD *len,
        [in, out, unique] DWORD *type);

    HRESULT GetPrivateDevices(
        [in, out, unique] WCHAR **pnp_device_ids,
        [in, out] DWORD *len);
};

[
    object,
    uuid(625e2df8-6392-4cf0-9ad1-3cfa5f17775c),
    pointer_default(unique)
]
interface IPortableDevice : IUnknown
{
    HRESULT Open(
        [in] const WCHAR *pnp_device_id,
        [in] IPortableDeviceValues *client_info);

    HRESULT SendCommand(
        [in] const DWORD flags,
        [in] IPortableDeviceValues *parameters,
        [out] IPortableDeviceValues **results);

    HRESULT Content(
       [out] IPortableDeviceContent **content);

    HRESULT Capabilities(
       [out] IPortableDeviceCapabilities **ppCapabilities);

    HRESULT Cancel();

    HRESULT Close();

    HRESULT Advise(
        [in] const DWORD flags,
        [in] IPortableDeviceEventCallback *callback,
        [in, unique] IPortableDeviceValues *parameters,
        [out] WCHAR **cookie);

    HRESULT Unadvise(
        [in] const WCHAR *cookie);

    HRESULT GetPnPDeviceID(
        [out] WCHAR **ppnp_device_id);
};

[
    object,
    uuid(6a96ed84-7c73-4480-9938-bf5af477d426),
    pointer_default(unique)
]
interface IPortableDeviceContent : IUnknown
{
    HRESULT EnumObjects(
        [in] const DWORD flags,
        [in] const WCHAR *pszParentObjectID,
        [in, unique] IPortableDeviceValues *pFilter,
        [out] IEnumPortableDeviceObjectIDs **ppEnum);

    HRESULT Properties(
        [out] IPortableDeviceProperties **ppProperties);

    HRESULT Transfer(
        [out] IPortableDeviceResources **ppResources);

    HRESULT CreateObjectWithPropertiesOnly(
       [in] IPortableDeviceValues *pValues,
       [in, out, unique] WCHAR **ppszObjectID);

    HRESULT CreateObjectWithPropertiesAndData(
       [in] IPortableDeviceValues *pValues,
       [out] IStream **data,
       [in, out, unique] DWORD *pdwOptimalWriteBufferSize,
       [in, out, unique] WCHAR **cookie);

    HRESULT Delete(
       [in] const DWORD dwOptions,
       [in] IPortableDevicePropVariantCollection *pObjectIDs,
       [in, out, unique] IPortableDevicePropVariantCollection **results);

    HRESULT GetObjectIDsFromPersistentUniqueIDs(
        [in] IPortableDevicePropVariantCollection *pPersistentUniqueIDs,
        [out] IPortableDevicePropVariantCollection **ppObjectIDs);

    HRESULT Cancel();

    HRESULT Move(
        [in] IPortableDevicePropVariantCollection *pObjectIDs,
        [in] const WCHAR *pszDestinationFolderObjectID,
        [in, out, unique] IPortableDevicePropVariantCollection **results);

    HRESULT Copy(
        [in] IPortableDevicePropVariantCollection *pObjectIDs,
        [in] const WCHAR *pszDestinationFolderObjectID,
        [in, out, unique] IPortableDevicePropVariantCollection **results);
};

[
    object,
    uuid(9b4add96-f6bf-4034-8708-eca72bf10554),
    pointer_default(unique)
]
interface IPortableDeviceContent2 : IPortableDeviceContent
{
    HRESULT UpdateObjectWithPropertiesAndData(
        [in] const WCHAR *pszObjectID,
        [in] IPortableDeviceValues *pProperties,
        [out] IStream **data,
        [in, out, unique] DWORD *pdwOptimalWriteBufferSize);
};

[
    object,
    uuid(10ece955-cf41-4728-bfa0-41eedf1bbf19),
    pointer_default(unique)
]
interface IEnumPortableDeviceObjectIDs : IUnknown
{
    HRESULT Next(
        [in] ULONG objects,
        [out, size_is(objects), length_is(*len)] WCHAR **object_id,
        [in, out, unique] ULONG *len);

    HRESULT Skip([in] ULONG objects);

    HRESULT Reset();

    HRESULT Clone([out] IEnumPortableDeviceObjectIDs **list);

    HRESULT Cancel();
};

[
    object,
    uuid(7f6d695c-03df-4439-a809-59266beee3a6),
    pointer_default(unique)
]
interface IPortableDeviceProperties : IUnknown
{
    HRESULT GetSupportedProperties(
        [in] const WCHAR *pszObjectID,
        [out] IPortableDeviceKeyCollection **ppKeys);

    HRESULT GetPropertyAttributes(
        [in] const WCHAR *pszObjectID,
        [in] REFPROPERTYKEY Key,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT GetValues(
        [in] const WCHAR *pszObjectID,
        [in, unique] IPortableDeviceKeyCollection *pKeys,
        [out] IPortableDeviceValues **ppValues);

    HRESULT SetValues(
        [in] const WCHAR *pszObjectID,
        [in] IPortableDeviceValues *pValues,
        [out] IPortableDeviceValues **results);

    HRESULT Delete(
        [in] const WCHAR *pszObjectID,
        [in] IPortableDeviceKeyCollection *pKeys);

    HRESULT Cancel();
};

[
    object,
    uuid(fd8878ac-d841-4d17-891c-e6829cdb6934),
    pointer_default(unique)
]
interface IPortableDeviceResources : IUnknown
{
    HRESULT GetSupportedResources(
        [in] const WCHAR *pszObjectID,
        [out] IPortableDeviceKeyCollection **ppKeys);

    HRESULT GetResourceAttributes(
        [in] const WCHAR *pszObjectID,
        [in] REFPROPERTYKEY Key,
        [out] IPortableDeviceValues **ppResourceAttributes);

    HRESULT GetStream(
        [in] const WCHAR *pszObjectID,
        [in] REFPROPERTYKEY Key,
        [in] const DWORD dwMode,
        [in, out, unique] DWORD *pdwOptimalBufferSize,
        [out] IStream **ppStream);

    HRESULT Delete(
        [in] const WCHAR *pszObjectID,
        [in] IPortableDeviceKeyCollection *pKeys);

    HRESULT Cancel();

    HRESULT CreateResource(
       [in] IPortableDeviceValues *pResourceAttributes,
       [out] IStream **data,
       [in, out, unique] DWORD *pdwOptimalWriteBufferSize,
       [in, out, unique] WCHAR **cookie);
};

[
    object,
    uuid(2c8c6dbf-e3dc-4061-becc-8542e810d126),
    pointer_default(unique)
]
interface IPortableDeviceCapabilities : IUnknown
{
    HRESULT GetSupportedCommands(
        [out] IPortableDeviceKeyCollection **ppCommands);

    HRESULT GetCommandOptions(
        [in] REFPROPERTYKEY Command,
        [out] IPortableDeviceValues **ppOptions);

    HRESULT GetFunctionalCategories(
        [out] IPortableDevicePropVariantCollection **ppCategories);

    HRESULT GetFunctionalObjects(
        [in] REFGUID Category,
        [out] IPortableDevicePropVariantCollection **ppObjectIDs);

    HRESULT GetSupportedContentTypes(
        [in] REFGUID Category,
        [out] IPortableDevicePropVariantCollection **contentTypes);

    HRESULT GetSupportedFormats(
        [in] REFGUID ContentType,
        [out] IPortableDevicePropVariantCollection **ppFormats);

    HRESULT GetSupportedFormatProperties(
        [in] REFGUID Format,
        [out] IPortableDeviceKeyCollection **ppKeys);

    HRESULT GetFixedPropertyAttributes(
        [in] REFGUID Format,
        [in] REFPROPERTYKEY Key,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT Cancel();

    HRESULT GetSupportedEvents(
        [out] IPortableDevicePropVariantCollection **ppEvents);

    HRESULT GetEventOptions(
        [in] REFGUID Event,
        [out] IPortableDeviceValues **ppOptions);
};


[
    object,
    uuid(a8792a31-f385-493c-a893-40f64eb45f6e),
    pointer_default(unique)
]
interface IPortableDeviceEventCallback : IUnknown
{
    HRESULT OnEvent(
        [in] IPortableDeviceValues *pEventParameters);
};

[
    object,
    uuid(88e04db3-1012-4d64-9996-f703a950d3f4),
    pointer_default(unique)
]
interface IPortableDeviceDataStream : IStream
{
    HRESULT GetObjectID(
        [out] WCHAR **ppszObjectID);

    HRESULT Cancel();
};

[
    object,
    uuid(5e98025f-bfc4-47a2-9a5f-bc900a507c67),
    pointer_default(unique)
]
interface IPortableDeviceUnitsStream : IUnknown
{
    [local]
    HRESULT SeekInUnits(
        [in] LARGE_INTEGER dlibMove,
        [in] WPD_STREAM_UNITS units,
        [in] DWORD dwOrigin,
        [annotation("_Out_opt_")] ULARGE_INTEGER *plibNewPosition);

    [call_as(SeekInUnits)]
    HRESULT RemoteSeekInUnits(
        [in] LARGE_INTEGER dlibMove,
        [in] WPD_STREAM_UNITS units,
        [in] DWORD dwOrigin,
        [out] ULARGE_INTEGER *plibNewPosition);

    HRESULT Cancel();
};

[
    object,
    uuid(482b05c0-4056-44ed-9e0f-5e23b009da93),
    pointer_default(unique)
]
interface IPortableDevicePropertiesBulk : IUnknown
{
    HRESULT QueueGetValuesByObjectList(
        [in] IPortableDevicePropVariantCollection *pObjectIDs,
        [in] IPortableDeviceKeyCollection *pKeys,
        [in] IPortableDevicePropertiesBulkCallback *callback,
        [out] GUID *pContext);

    HRESULT QueueGetValuesByObjectFormat(
        [in] REFGUID pguidObjectFormat,
        [in] const WCHAR *pszParentObjectID,
        [in] const DWORD dwDepth,
        [in] IPortableDeviceKeyCollection *pKeys,
        [in] IPortableDevicePropertiesBulkCallback *callback,
        [out] GUID *pContext);

    HRESULT QueueSetValuesByObjectList(
        [in] IPortableDeviceValuesCollection *pObjectValues,
        [in] IPortableDevicePropertiesBulkCallback *callback,
        [out] GUID *pContext);

    HRESULT Start([in] REFGUID pContext);

    HRESULT Cancel([in] REFGUID pContext);
};

[
    object,
    uuid(9deacb80-11e8-40e3-a9f3-f557986a7845),
    pointer_default(unique)
]
interface IPortableDevicePropertiesBulkCallback : IUnknown
{
    HRESULT OnStart(
        [in] REFGUID pContext);

    HRESULT OnProgress(
        [in] REFGUID pContext,
        [in] IPortableDeviceValuesCollection *pResults);

    HRESULT OnEnd(
        [in] REFGUID pContext,
        [in] HRESULT hrStatus);
};

[
    object,
    uuid(a8abc4e9-a84a-47a9-80b3-c5d9b172a961),
    pointer_default(unique)
]
interface IPortableDeviceServiceManager : IUnknown
{
    HRESULT GetDeviceServices(
        [in] const WCHAR *pnp_device_id,
        [in] REFGUID guidServiceCategory,
        [in, out, unique] WCHAR **pServices,
        [in, out] DWORD *pcServices);

    HRESULT GetDeviceForService(
        [in] const WCHAR *pnp_service_id,
        [out] WCHAR **pnp_device_id);
};

[
    object,
    uuid(d3bd3a44-d7b5-40a9-98b7-2fa4d01dec08),
    pointer_default(unique)
]
interface IPortableDeviceService : IUnknown
{
    HRESULT Open(
        [in] const WCHAR *pnp_service_id,
        [in] IPortableDeviceValues *client_info);

    HRESULT Capabilities(
        [out] IPortableDeviceServiceCapabilities **ppCapabilities);

    HRESULT Content(
        [out] IPortableDeviceContent2 **content);

    HRESULT Methods(
        [out] IPortableDeviceServiceMethods **ppMethods);

    HRESULT Cancel();

    HRESULT Close();

    HRESULT GetServiceObjectID(
        [out] WCHAR **ppszServiceObjectID);

    HRESULT GetPnPServiceID([out] WCHAR **pnp_service_id);

    HRESULT Advise(
        [in] const DWORD flags,
        [in] IPortableDeviceEventCallback *callback,
        [in, unique] IPortableDeviceValues *parameters,
        [out] WCHAR **cookie);

    HRESULT Unadvise(
        [in] const WCHAR *cookie);

    HRESULT SendCommand(
        [in] const DWORD flags,
        [in] IPortableDeviceValues *parameters,
        [out] IPortableDeviceValues **results);
};

[
    object,
    uuid(24dbd89d-413e-43e0-bd5b-197f3c56c886),
    pointer_default(unique)
]
interface IPortableDeviceServiceCapabilities : IUnknown
{
    HRESULT GetSupportedMethods(
        [out] IPortableDevicePropVariantCollection **ppMethods);

    HRESULT GetSupportedMethodsByFormat(
        [in] REFGUID Format,
        [out] IPortableDevicePropVariantCollection **ppMethods);

    HRESULT GetMethodAttributes (
        [in] REFGUID Method,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT GetMethodParameterAttributes(
        [in] REFGUID Method,
        [in] REFPROPERTYKEY Parameter,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT GetSupportedFormats(
        [out] IPortableDevicePropVariantCollection **ppFormats);

    HRESULT GetFormatAttributes(
        [in] REFGUID Format,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT GetSupportedFormatProperties(
        [in] REFGUID Format,
        [out] IPortableDeviceKeyCollection **ppKeys);

    HRESULT GetFormatPropertyAttributes(
        [in] REFGUID Format,
        [in] REFPROPERTYKEY Property,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT GetSupportedEvents(
        [out] IPortableDevicePropVariantCollection **ppEvents);

    HRESULT GetEventAttributes(
        [in] REFGUID Event,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT GetEventParameterAttributes(
        [in] REFGUID Event,
        [in] REFPROPERTYKEY Parameter,
        [out] IPortableDeviceValues **ppAttributes);

    HRESULT GetInheritedServices(
        [in] const DWORD dwInheritanceType,
        [out] IPortableDevicePropVariantCollection **ppServices);

    HRESULT GetFormatRenderingProfiles(
        [in] REFGUID Format,
        [out] IPortableDeviceValuesCollection **ppRenderingProfiles);

    HRESULT GetSupportedCommands(
        [out] IPortableDeviceKeyCollection **ppCommands);

    HRESULT GetCommandOptions(
        [in] REFPROPERTYKEY Command,
        [out] IPortableDeviceValues **ppOptions);

    HRESULT Cancel();

};

[
    object,
    uuid(e20333c9-fd34-412d-a381-cc6f2d820df7),
    pointer_default(unique)
]
interface IPortableDeviceServiceMethods : IUnknown
{
    HRESULT Invoke(
       [in] REFGUID Method,
       [in, unique] IPortableDeviceValues *parameters,
       [in, out, unique] IPortableDeviceValues **results);

    HRESULT InvokeAsync(
       [in] REFGUID Method,
       [in, unique] IPortableDeviceValues *parameters,
       [in, unique] IPortableDeviceServiceMethodCallback *callback);

    HRESULT Cancel(
       [in, unique] IPortableDeviceServiceMethodCallback *callback);
};

[
    object,
    uuid(c424233c-afce-4828-a756-7ed7a2350083),
    pointer_default(unique)
]
interface IPortableDeviceServiceMethodCallback : IUnknown
{
    HRESULT OnComplete(
       [in] HRESULT hrStatus,
       [in] IPortableDeviceValues *pResults);
};

[
    object,
    uuid(e56b0534-d9b9-425c-9b99-75f97cb3d7c8),
    pointer_default(unique)
]
interface IPortableDeviceServiceActivation : IUnknown
{
    HRESULT OpenAsync(
        [in] const WCHAR *pnp_service_id,
        [in] IPortableDeviceValues *client_info,
        [in] IPortableDeviceServiceOpenCallback *callback);

    HRESULT CancelOpenAsync();
};

[
    object,
    uuid(bced49c8-8efe-41ed-960b-61313abd47a9),
    pointer_default(unique)
]
interface IPortableDeviceServiceOpenCallback : IUnknown
{
    HRESULT OnComplete(
       [in] HRESULT hrStatus);
};

[
    object,
    local,
    uuid(5e1eafc3-e3d7-4132-96fa-759c0f9d1e0f),
]
interface IPortableDeviceDispatchFactory : IUnknown
{
    HRESULT GetDeviceDispatch(
       [in] const WCHAR *pnp_device_id,
       [out] IDispatch **ppDeviceDispatch);
};

[
    object,
    dual,
    local,
    nonextensible,
    uuid(94fc7953-5ca1-483a-8aee-df52e7747d00),
]
interface IPortableDeviceWebControl: IDispatch
{
    [id(1)]
    HRESULT GetDeviceFromId(
       [in, annotation("_In_")] BSTR deviceId,
       [out, retval, annotation("_COM_Outptr_")] IDispatch **ppDevice);

    [id(2)]
    HRESULT GetDeviceFromIdAsync(
       [in, annotation("_In_")] BSTR deviceId,
       [in, annotation("_In_")] IDispatch *pCompletionHandler,
       [in, unique, annotation("_In_opt_")] IDispatch *pErrorHandler);
};

[
    uuid(1f001332-1a57-4934-be31-affc99f4ee0a),
    version(1.0),
    helpstring("PortableDeviceApi 1.0 Type Library")
]
library PortableDeviceApiLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(728a21c5-3d9e-48d7-9810-864848f0f404),
        helpstring("PortableDevice Class")
    ]
    coclass PortableDevice
    {
        [default] interface IPortableDevice;
    };

    [
        uuid(0af10cec-2ecd-4b92-9581-34f6ae0637f3),
        helpstring("PortableDeviceManager Class")
    ]
    coclass PortableDeviceManager
    {
        [default] interface IPortableDeviceManager;
    };

    [
        uuid(ef5db4c2-9312-422c-9152-411cd9c4dd84),
    ]
    coclass PortableDeviceService
    {
        [default] interface IPortableDeviceService;
    };

    [
        uuid(43232233-8338-4658-ae01-0b4ae830b6b0),
    ]
    coclass PortableDeviceDispatchFactory
    {
        [default] interface IPortableDeviceDispatchFactory;
    };

    [
        uuid(f7c0039a-4762-488a-b4b3-760ef9a1ba9b),
    ]
    coclass PortableDeviceFTM
    {
        [default] interface IPortableDevice;
    };

    [
        uuid(1649b154-c794-497a-9b03-f3f0121302f3),
    ]
    coclass PortableDeviceServiceFTM
    {
        [default] interface IPortableDeviceService;
    };

    [
        uuid(186dd02c-2dec-41b5-a7d4-b59056fade51),
    ]
    coclass PortableDeviceWebControl
    {
        [default] interface IPortableDeviceWebControl;
    };

};
